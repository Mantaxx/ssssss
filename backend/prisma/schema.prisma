// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Stores information about fanciers.
model Fancier {
  id        Int      @id @default(autoincrement())
  name      String?
  pzhgpId   String?  @map("pzhgp_id")
  clubId    String?  @map("club_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lofts   Loft[]
  pigeons Pigeon[]
  results Result[]

  @@map("fanciers")
}

/// Data about the location of lofts.
model Loft {
  id         Int      @id @default(autoincrement())
  fancierId  Int      @map("fancier_id")
  address    String?
  latitude   Float?
  longitude  Float?
  isVerified Boolean? @default(false) @map("is_verified")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  fancier Fancier @relation(fields: [fancierId], references: [id])

  @@map("lofts")
}

/// Detailed information about each pigeon.
model Pigeon {
  id         Int      @id @default(autoincrement())
  fancierId  Int      @map("fancier_id")
  ringNumber String   @unique @map("ring_number")
  year       Int?
  sex        String?
  color      String?
  strain     String?
  sireId     Int?     @map("sire_id")
  damId      Int?     @map("dam_id")
  electronicRingId String? @map("electronic_ring_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  fancier Fancier @relation(fields: [fancierId], references: [id])
  sire    Pigeon?  @relation("Sire", fields: [sireId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dam     Pigeon?  @relation("Dam", fields: [damId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  offspringAsSire Pigeon[] @relation("Sire")
  offspringAsDam  Pigeon[] @relation("Dam")
  results         Result[]

  @@map("pigeons")
}

/// Data about competitive races.
model Race {
  id                   Int       @id @default(autoincrement())
  name                 String?
  releasePointId       Int       @map("release_point_id")
  releaseDatetimeUtc   DateTime? @map("release_datetime_utc")
  pzhgpCategory        String?   @map("pzhgp_category")
  totalPigeonsBasketed Int?      @map("total_pigeons_basketed")
  totalFanciers        Int?      @map("total_fanciers")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  releasePoint ReleasePoint @relation(fields: [releasePointId], references: [id])
  results      Result[]

  @@map("races")
}

/// Official PZHGP release points.
model ReleasePoint {
  id             Int      @id @default(autoincrement())
  name           String?
  latitude       Float?
  longitude      Float?
  sourceDocument String?  @map("source_document")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  races Race[]

  @@map("release_points")
}

/// Results of individual pigeons in a given race.
model Result {
  id                 Int       @id @default(autoincrement())
  raceId             Int       @map("race_id")
  pigeonId           Int       @map("pigeon_id")
  fancierId          Int       @map("fancier_id")
  arrivalDatetimeUtc DateTime? @map("arrival_datetime_utc")
  clockingSystemId   String?   @map("clocking_system_id")
  position           Int?
  speedMPerMin       Decimal?  @db.Decimal(10, 2) @map("speed_m_per_min")
  coefficient        Decimal?  @db.Decimal(10, 4)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  race    Race    @relation(fields: [raceId], references: [id])
  pigeon  Pigeon  @relation(fields: [pigeonId], references: [id])
  fancier Fancier @relation(fields: [fancierId], references: [id])

  @@map("results")
}